{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A fork of Explicates by Alexander Mendes. These docs mirror those found here . Explicates is a Web Annotation server built with Flask and backed by PostgreSQL . It complies with the Web Annotation Protocol and includes additional endpoints for searching and exporting the data. To find our how to setup a local development server see the Setup section.","title":"Introduction"},{"location":"annotations/","text":"Annotations can be created, read, updated and deleted via the following endpoints. Post \u00b6 Create an Annotation. POST /annotations/<container_id>/ Get \u00b6 Read an Annotation. GET /annotations/<container_id>/<annotation_id>/ Put \u00b6 Update an Annotation. PUT /annotations/<container_id>/<annotation_id>/ Delete \u00b6 Delete an Annotation. DELETE /annotations/<container_id>/<annotation_id>/","title":"Annotations"},{"location":"annotations/#post","text":"Create an Annotation. POST /annotations/<container_id>/","title":"Post"},{"location":"annotations/#get","text":"Read an Annotation. GET /annotations/<container_id>/<annotation_id>/","title":"Get"},{"location":"annotations/#put","text":"Update an Annotation. PUT /annotations/<container_id>/<annotation_id>/","title":"Put"},{"location":"annotations/#delete","text":"Delete an Annotation. DELETE /annotations/<container_id>/<annotation_id>/","title":"Delete"},{"location":"collections/","text":"Annotation Collections can be created, read, updated and deleted via the following endpoints. Post \u00b6 Create an Annotation Collection. POST /annotations/ Get \u00b6 Returns a Annotation Collection containing a minimal representation of all Annotation Collections on the server. GET /annotations/ Put \u00b6 Update an Annotation Collection. PUT /annotations/my-container/ Delete \u00b6 Delete an Annotation Collection. DELETE /annotations/my-container/ Deletion rules Annotation Collections cannot be deleted if they are the last one remaining on the server, or if they contain Annotations.","title":"Collections"},{"location":"collections/#post","text":"Create an Annotation Collection. POST /annotations/","title":"Post"},{"location":"collections/#get","text":"Returns a Annotation Collection containing a minimal representation of all Annotation Collections on the server. GET /annotations/","title":"Get"},{"location":"collections/#put","text":"Update an Annotation Collection. PUT /annotations/my-container/","title":"Put"},{"location":"collections/#delete","text":"Delete an Annotation Collection. DELETE /annotations/my-container/ Deletion rules Annotation Collections cannot be deleted if they are the last one remaining on the server, or if they contain Annotations.","title":"Delete"},{"location":"export/","text":"All Annotations in an Annotation Collection can be exported from the database via the following endpoint: GET /export/<collection_id>/ The Annotations are streamed back to the client as a JSON list. This endpoint is intended for programmatic use only. It is not recommended to access it via a web browser as, depending on the number of Annotations to be exported, it is likely the browser would run out of memory before the request finishes. However, you can add the URL parameter zip=1 to download the Annotations as a ZIP file. Curl example curl https://example.org/annotations/my-container/ > out.json Python pandas example import pandas iri = 'https://example.org/annotations/my-container/' df = pandas . read_json ( iri , orient = 'records' )","title":"Export"},{"location":"search/","text":"Presented below are the available options for retrieving Annotations from the search endpoint at: GET /search/ Results are returned as an AnnotationCollection that uses the usual structure. The queries should be sent as JSON, although Using URL parameters should also work. If both a JSON body and URL parameters are sent with the request then the JSON body will take preference. limit \u00b6 Limit the Annotations returned. { \"limit\" : 42 } offset \u00b6 Offset the first Annotation to be returned. { \"offset\" : 42 } collection \u00b6 Return Annotations that belong to the given AnnotationCollection. { \"collection\" : \"https://example.org/annotations/my-container/\" } range \u00b6 Return Annotations where the values for a set of keys fall within the given ranges. The query below will return all Annotations created between 2018-05-15T00:00:00Z and 2018-05-17T00:00:00Z . Note that when querying a datetime field the ISO 8601 format shown here should be used. { \"range\" : { \"created\" : { \"gte\" : \"2018-05-15T00:00:00Z\" , \"lte\" : \"2018-05-17T00:00:00Z\" } } } The range query accepts the following parameters for each field: key description gte Greater-than or equal to gt Greater-than lte Less-than or equal to lt Less-than contains \u00b6 Return Annotations that contain a specific value. The query below will return all Annotations that contain a body where the id is https://example.org/page1/ . { \"contains\" : { \"body\" : { \"id\" : \"https://example.org/page1/\" } } } fts \u00b6 Return Annotations where the specified keys contain a query . The following query will return all Annotations where the body contains any of the words in some keywords . { \"fts\" : { \"body\" : { \"query\" : \"some keywords\" } } } The fts query accepts the following parameters for each field: key description query The search query (required) operator Join tokens with and or or (default and ) prefix Treat each token as a prefix (default True ) Full-text search language The dictionary used for full-text searches is defined for each Annotation by the first language code found in the Annotation's body . If no such language code is found then the server default is used. See the Configuration section for more details of the available dictionaries. fts_phrase \u00b6 Return Annotations where the specified keys contain a query phrase. The following query will return all Annotations where the body contains the phrase that begins with Some partial phras . { \"fts_phrase\" : { \"body\" : { \"query\" : \"Some partial phras\" } } } The fts_phrase query accepts the following parameters for each field: key description query The search query (required) prefix Treat the query as a prefix (default True ) distance The distance between tokens (default 1 ) Exact phrase searches Note that all phrase queries will be treated as prefixes; to search for exact phrases use contains instead. deleted \u00b6 Return or include deleted Annotations. { \"deleted\" : \"include\" } The deleted query accepts the following parameters: key description exclude Exclude deleted Annotations (default) include Include deleted Annotations only Return only deleted Annotations","title":"Search"},{"location":"search/#limit","text":"Limit the Annotations returned. { \"limit\" : 42 }","title":"limit"},{"location":"search/#offset","text":"Offset the first Annotation to be returned. { \"offset\" : 42 }","title":"offset"},{"location":"search/#collection","text":"Return Annotations that belong to the given AnnotationCollection. { \"collection\" : \"https://example.org/annotations/my-container/\" }","title":"collection"},{"location":"search/#range","text":"Return Annotations where the values for a set of keys fall within the given ranges. The query below will return all Annotations created between 2018-05-15T00:00:00Z and 2018-05-17T00:00:00Z . Note that when querying a datetime field the ISO 8601 format shown here should be used. { \"range\" : { \"created\" : { \"gte\" : \"2018-05-15T00:00:00Z\" , \"lte\" : \"2018-05-17T00:00:00Z\" } } } The range query accepts the following parameters for each field: key description gte Greater-than or equal to gt Greater-than lte Less-than or equal to lt Less-than","title":"range"},{"location":"search/#contains","text":"Return Annotations that contain a specific value. The query below will return all Annotations that contain a body where the id is https://example.org/page1/ . { \"contains\" : { \"body\" : { \"id\" : \"https://example.org/page1/\" } } }","title":"contains"},{"location":"search/#fts","text":"Return Annotations where the specified keys contain a query . The following query will return all Annotations where the body contains any of the words in some keywords . { \"fts\" : { \"body\" : { \"query\" : \"some keywords\" } } } The fts query accepts the following parameters for each field: key description query The search query (required) operator Join tokens with and or or (default and ) prefix Treat each token as a prefix (default True ) Full-text search language The dictionary used for full-text searches is defined for each Annotation by the first language code found in the Annotation's body . If no such language code is found then the server default is used. See the Configuration section for more details of the available dictionaries.","title":"fts"},{"location":"search/#fts_phrase","text":"Return Annotations where the specified keys contain a query phrase. The following query will return all Annotations where the body contains the phrase that begins with Some partial phras . { \"fts_phrase\" : { \"body\" : { \"query\" : \"Some partial phras\" } } } The fts_phrase query accepts the following parameters for each field: key description query The search query (required) prefix Treat the query as a prefix (default True ) distance The distance between tokens (default 1 ) Exact phrase searches Note that all phrase queries will be treated as prefixes; to search for exact phrases use contains instead.","title":"fts_phrase"},{"location":"search/#deleted","text":"Return or include deleted Annotations. { \"deleted\" : \"include\" } The deleted query accepts the following parameters: key description exclude Exclude deleted Annotations (default) include Include deleted Annotations only Return only deleted Annotations","title":"deleted"},{"location":"setup/","text":"The following page explains how to get an Explicates server up and running. Installation \u00b6 A virtual machine setup is provided for local development. Download and install Vagrant >= 4.2.10 and VirtualBox >= 1.2.1, then run: # setup vm vagrant up # enter vm vagrant ssh # run python run.py Configuration \u00b6 The contents of the settings template file, settings.py.tmpl , are replicated below. To edit any of the settings make a copy of the template: cp settings . py . tmpl settings . py The comments below indicate where any default values are used. { ! ../ settings . py . tmpl ! } Deployment \u00b6 Explicates requires a server with PostgreSQL 10 (or higher) installed. The recommended OS is Ubuntu 18.04. The guide following assumes you are starting with a fresh Ubuntu 18.04 server. Update and upgrade the package index: sudo apt-get update sudo apt-get upgrade Install Python and git \u00b6 Install Python: sudo apt install python Install Python dependencies: sudo apt install python-virtualenv python-dev python-setuptools python-pip Install git: sudo apt-get install git-core Download and build Explicates \u00b6 Clone Explicates: mkdir /var/www git clone https://github.com/harryjmoss/explicates /var/www/explicates Create a virtual environment: cd /var/www/explicates virtualenv env Activate the virtual environment: source env/bin/activate Install Explicates: pip install -r requirements.txt Copy the settings template: cp settings.py.tmpl settings.py Important You should edit the settings file to uncomment ENV and SERVER_NAME , where the server name is the location of your production server. Copy the alembic configuration: cp alembic.ini.tmpl alembic.ini Setup the database \u00b6 Install database dependencies: sudo apt-get install postgresql postgresql-server-dev-all python-psycopg2 libpq-dev Add a database user: sudo -u postgres createuser -d -P explicates Enter the password tester when prompted. Password choice If you choose a different password you should also edit the database path in settings.py and alembic.ini . Create the database: sudo -u postgres createdb explicates -O explicates Populate the database: python /var/www/explicates/bin/db_create.py Setup NGINX \u00b6 Install NGINX: sudo apt-get install nginx Remove the default server configuration: sudo rm -r /etc/nginx/sites-available/default sudo rm -r /etc/nginx/sites-enabled/default Edit a new server configuration file: vim / etc / nginx / sites - available / explicates Copy in the following and save the file: server { listen 80 default_server ; listen [ :: ] :80 default_server ; # Change this to match your domain server_name annotations.example.com ; client_body_buffer_size 10K ; client_header_buffer_size 1k ; client_max_body_size 10m ; large_client_header_buffers 2 1k ; gzip on ; gzip_comp_level 2 ; gzip_types text/plain application/json application/ld+json ; gzip_min_length 1000 ; gzip_proxied expired no-cache no-store private auth ; location / { expires -1 ; include uwsgi_params ; uwsgi_pass unix:/tmp/explicates.sock ; } } Enable the Explicates configuration: ln -s /etc/nginx/sites-available/explicates /etc/nginx/sites-enabled/explicates Restart the NGINX server: sudo service nginx restart Setting up uWSGI \u00b6 Install uWSGI: pip install -U uwsgi Edit a new server configuration file: vim /var/www/explicates/explicates.ini Copy in the following and save the file: [ uwsgi ] socket = /tmp/explicates.sock chmod-socket = 666 chdir = /var/www/explicates pythonpath = .. virtualenv = /var/www/explicates/env module = run:app cpu-affinity = 1 processes = 2 threads = 2 buffer-size = 65535 Setup Up Supervisor \u00b6 Supervisor is used to run Explicates in the background and restart it when the server boots up. Install supervisor: sudo apt - get install supervisor Edit a new Supervisor program configuration: vim /etc/supervisor/conf.d/explicates.conf Copy in the following and save the file: [program:explicates] command = /var/www/explicates/env/bin/uwsgi /var/www/explicates/explicates.ini directory = /var/www/explicates autostart = true autorestart = true log_stdout = true log_stderr = true logfile = /var/log/explicates.log logfile_maxbytes = 10MB logfile_backups = 2 Restart supervisor: sudo service supervisor stop sudo service supervisor start Your Annotation server should now be running at http://your.domain.com . Security \u00b6 There are lots of potential steps that you could take to secure your servers. Running through all of the options here is outside the scope of this guide, but here are some quick wins for the LibCrowds and Explicates servers (details might need to be modified a bit for the PYBOSSA server). Firewall \u00b6 UFW, or Uncomplicated Firewall, is an easy way to manage a frontend firewall. Install it: sudo apt-get install ufw Deny incoming and allow outgoing by default: sudo ufw default deny incoming sudo ufw default allow outgoing Allow connections: sudo ufw allow ssh sudo ufw allow 22 /tcp Check the rules: ufw status You should see the following output: To Action From -- ------ ---- 22 ALLOW Anywhere 80 ALLOW Anywhere 443 ALLOW Anywhere 22 ( v6 ) ALLOW Anywhere ( v6 ) 80 ( v6 ) ALLOW Anywhere ( v6 ) 443 ( v6 ) ALLOW Anywhere ( v6 ) If the rules do indeed appear as above, enable the firewall: sudo ufw enable Secure Sockets Layer (SSL) \u00b6 Let's Encrypt provide free SSL certificates. Use the Certbot client to set them up for your operating system. After following the Certbot guide, above, you can setup a scheduled task to automatically renew the certificates. Edit a new daily task: vim /etc/cron.daily/certrenew Copy in the following and save the file: certbot renew Make the file executable: chmod +x /etc/cron.daily/certrenew Your certificate should now be checked for renewal daily.","title":"Setup"},{"location":"setup/#installation","text":"A virtual machine setup is provided for local development. Download and install Vagrant >= 4.2.10 and VirtualBox >= 1.2.1, then run: # setup vm vagrant up # enter vm vagrant ssh # run python run.py","title":"Installation"},{"location":"setup/#configuration","text":"The contents of the settings template file, settings.py.tmpl , are replicated below. To edit any of the settings make a copy of the template: cp settings . py . tmpl settings . py The comments below indicate where any default values are used. { ! ../ settings . py . tmpl ! }","title":"Configuration"},{"location":"setup/#deployment","text":"Explicates requires a server with PostgreSQL 10 (or higher) installed. The recommended OS is Ubuntu 18.04. The guide following assumes you are starting with a fresh Ubuntu 18.04 server. Update and upgrade the package index: sudo apt-get update sudo apt-get upgrade","title":"Deployment"},{"location":"setup/#install-python-and-git","text":"Install Python: sudo apt install python Install Python dependencies: sudo apt install python-virtualenv python-dev python-setuptools python-pip Install git: sudo apt-get install git-core","title":"Install Python and git"},{"location":"setup/#download-and-build-explicates","text":"Clone Explicates: mkdir /var/www git clone https://github.com/harryjmoss/explicates /var/www/explicates Create a virtual environment: cd /var/www/explicates virtualenv env Activate the virtual environment: source env/bin/activate Install Explicates: pip install -r requirements.txt Copy the settings template: cp settings.py.tmpl settings.py Important You should edit the settings file to uncomment ENV and SERVER_NAME , where the server name is the location of your production server. Copy the alembic configuration: cp alembic.ini.tmpl alembic.ini","title":"Download and build Explicates"},{"location":"setup/#setup-the-database","text":"Install database dependencies: sudo apt-get install postgresql postgresql-server-dev-all python-psycopg2 libpq-dev Add a database user: sudo -u postgres createuser -d -P explicates Enter the password tester when prompted. Password choice If you choose a different password you should also edit the database path in settings.py and alembic.ini . Create the database: sudo -u postgres createdb explicates -O explicates Populate the database: python /var/www/explicates/bin/db_create.py","title":"Setup the database"},{"location":"setup/#setup-nginx","text":"Install NGINX: sudo apt-get install nginx Remove the default server configuration: sudo rm -r /etc/nginx/sites-available/default sudo rm -r /etc/nginx/sites-enabled/default Edit a new server configuration file: vim / etc / nginx / sites - available / explicates Copy in the following and save the file: server { listen 80 default_server ; listen [ :: ] :80 default_server ; # Change this to match your domain server_name annotations.example.com ; client_body_buffer_size 10K ; client_header_buffer_size 1k ; client_max_body_size 10m ; large_client_header_buffers 2 1k ; gzip on ; gzip_comp_level 2 ; gzip_types text/plain application/json application/ld+json ; gzip_min_length 1000 ; gzip_proxied expired no-cache no-store private auth ; location / { expires -1 ; include uwsgi_params ; uwsgi_pass unix:/tmp/explicates.sock ; } } Enable the Explicates configuration: ln -s /etc/nginx/sites-available/explicates /etc/nginx/sites-enabled/explicates Restart the NGINX server: sudo service nginx restart","title":"Setup NGINX"},{"location":"setup/#setting-up-uwsgi","text":"Install uWSGI: pip install -U uwsgi Edit a new server configuration file: vim /var/www/explicates/explicates.ini Copy in the following and save the file: [ uwsgi ] socket = /tmp/explicates.sock chmod-socket = 666 chdir = /var/www/explicates pythonpath = .. virtualenv = /var/www/explicates/env module = run:app cpu-affinity = 1 processes = 2 threads = 2 buffer-size = 65535","title":"Setting up uWSGI"},{"location":"setup/#setup-up-supervisor","text":"Supervisor is used to run Explicates in the background and restart it when the server boots up. Install supervisor: sudo apt - get install supervisor Edit a new Supervisor program configuration: vim /etc/supervisor/conf.d/explicates.conf Copy in the following and save the file: [program:explicates] command = /var/www/explicates/env/bin/uwsgi /var/www/explicates/explicates.ini directory = /var/www/explicates autostart = true autorestart = true log_stdout = true log_stderr = true logfile = /var/log/explicates.log logfile_maxbytes = 10MB logfile_backups = 2 Restart supervisor: sudo service supervisor stop sudo service supervisor start Your Annotation server should now be running at http://your.domain.com .","title":"Setup Up Supervisor"},{"location":"setup/#security","text":"There are lots of potential steps that you could take to secure your servers. Running through all of the options here is outside the scope of this guide, but here are some quick wins for the LibCrowds and Explicates servers (details might need to be modified a bit for the PYBOSSA server).","title":"Security"},{"location":"setup/#firewall","text":"UFW, or Uncomplicated Firewall, is an easy way to manage a frontend firewall. Install it: sudo apt-get install ufw Deny incoming and allow outgoing by default: sudo ufw default deny incoming sudo ufw default allow outgoing Allow connections: sudo ufw allow ssh sudo ufw allow 22 /tcp Check the rules: ufw status You should see the following output: To Action From -- ------ ---- 22 ALLOW Anywhere 80 ALLOW Anywhere 443 ALLOW Anywhere 22 ( v6 ) ALLOW Anywhere ( v6 ) 80 ( v6 ) ALLOW Anywhere ( v6 ) 443 ( v6 ) ALLOW Anywhere ( v6 ) If the rules do indeed appear as above, enable the firewall: sudo ufw enable","title":"Firewall"},{"location":"setup/#secure-sockets-layer-ssl","text":"Let's Encrypt provide free SSL certificates. Use the Certbot client to set them up for your operating system. After following the Certbot guide, above, you can setup a scheduled task to automatically renew the certificates. Edit a new daily task: vim /etc/cron.daily/certrenew Copy in the following and save the file: certbot renew Make the file executable: chmod +x /etc/cron.daily/certrenew Your certificate should now be checked for renewal daily.","title":"Secure Sockets Layer (SSL)"}]}